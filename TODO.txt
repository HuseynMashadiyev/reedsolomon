* Cythonize more, read recent tutorials:
    * https://www.peterbaumgartner.com/blog/intro-to-just-enough-cython-to-be-useful/
    * https://members.loria.fr/LMendoza/link/Cython_speedup_notes.html
    * chunking should be moved to functions outside of RSCodec python object, so that we can make a cpdef and use memoryviews. Essentially, all looping functions should be done in cythonized functions, outside of Python objects (we can't cythonize Python objects methods).
    * remove all PyObject calls, especially in bytearrays
        * maybe replace all bytearrays by array 'i' and check if no more python calls
        * or maybe try to create an array with nogil, no PyObject call
        * or another way to make a pure C array? Or any kind of chained list? Something to store an array of items? We just need a basic array, nothing fancy, but with no Python call.
        * cpython array is much more efficient than cython view array! https://groups.google.com/g/cython-users/c/CwtU_jYADgM
            * then use nogil in cdef to ensure there is no python object (try with gf_poly_add() ).
        * use vector as a variable https://stackoverflow.com/questions/54759483/how-to-return-two-values-in-cython-cdef-without-gil-nogil
            * great to specify inside ctuples in cdef function definition return value
        * once return type is changed, try to change the exception type, maybe if pointer we set exception to a int instead
    * return types for each functions, especially those returning an array, maybe I can retry returning memoryviews now?
        * especially for rs_encode_msg() and decoding functions (may require a change in return values, to drop the tuples, or use vectors instead to return inside a ctuple)
    * replace all len() with array.shape[0]:
    regex search: len\(([^\)]+)\)
    replace: \1.shape[0]
    * add noexcept to cdef functions definitions once we finished unpythonizing all functions, because it will make debugging harder (exceptions will be printed but not propagated) https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html#exception-values-and-noexcept and https://cython.readthedocs.io/en/latest/src/userguide/language_basics.html#error-return-values
    * cpdef is slightly faster than cdef + def in classes https://stackoverflow.com/questions/48864631/what-are-the-differences-between-a-cpdef-and-a-cdef-wrapped-in-a-def
    * define return ctype value for each function, otherwise "You don’t need to (and shouldn’t) declare exception values for functions which return Python objects. Remember that a function with no declared return type implicitly returns a Python object. (Exceptions on such functions are implicitly propagated by returning NULL.)".
    * add nogil (and noexcept) to most cpdef functions https://stackoverflow.com/questions/54759483/how-to-return-two-values-in-cython-cdef-without-gil-nogil
    * https://stackoverflow.com/questions/41764244/obtaining-pointer-to-python-memoryview-on-bytes-object
    * Memoryviews:
        * Const memoryview to accept immutable bytes https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html#read-only-views
        * Memoryviews do not require the GIL except for copying: https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html#memoryviews-and-the-gil
        * Memoryviews and Cython Arrays https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html#memoryview-objects-and-cython-arrays
        * CPython Array module: https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html#cpython-array-module
        * to access parent array: a.base https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html#memoryview-objects-and-cython-arrays
        * can coerce memoryviews without copying content? Does it work for other types of arrays than numpy arrays? https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html#coercion-to-numpy
    * cdivision = False has a 35% speed penalty! But we are reliant on Python division style... We would have to rewrite a LOT of the maths! https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#compiler-directives and https://github.com/cython/cython/wiki/enhancements-division
    * with cython.nogil, parallel(): https://cython.readthedocs.io/en/latest/src/userguide/parallelism.html#cython.parallel.parallel

* Best resources on memoryviews and arrays speed:
    * https://stackoverflow.com/questions/18462785/what-is-the-recommended-way-of-allocating-memory-for-a-typed-memory-view
    * https://groups.google.com/g/cython-users/c/CwtU_jYADgM
    * https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html#cpython-array-module

------

Other TODO apart from Cython:
* Optimize pure python implementation by using _bytearray() instead of [] whenever possible (compare with changes done on the cython implementation)
* Pre-allocate bytearrays whenever possible in the pure-python implementation (like the cython implementation)
* Test and fix issues with galois fields smaller than 2^8.
