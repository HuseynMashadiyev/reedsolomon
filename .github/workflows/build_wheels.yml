name: Build_wheelhouse
# Cross-platform wheel and sdist builder and pypi uploader for Python modules
# From: https://github.com/pypa/cibuildwheel/blob/main/examples/github-deploy.yml and https://github.com/dnicolodi/python-siphash24/blob/master/.github/workflows/wheels.yml

# Build only on creation of new releases
on:
  # push:  # build on every commit push
  # pull_request:  # build on every pull request
  release:  # build on every releases
    types:
    - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
          #- os: macos-11
          #- os: windows-2019
          #  architecture: x86
          #- os: windows-2019
          #  architecture: AMD64

    steps:
      - uses: actions/checkout@v3

      # - uses: docker/setup-qemu-action@v2
      #   with:
      #     platforms: arm64
      #   if: runner.os == 'Linux'
      # - name: Prepare MSVC for Meson on Windows AMD64, see https://dvdhrm.github.io/2021/04/21/meson-msvc-github-actions/
      #   uses: bus1/cabuild/action/msdevshell@v1
      #   with:
      #     architecture: x64
      #   if: runner.os == 'Windows' && matrix.architecture == 'AMD64'
      # - name: Prepare MSVC for Meson on Windows x86, see https://dvdhrm.github.io/2021/04/21/meson-msvc-github-actions/
      #   uses: bus1/cabuild/action/msdevshell@v1
      #   with:
      #     architecture: x86
      #   if: runner.os == 'Windows' && matrix.architecture == 'x86'

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.1
        env:
            REEDSOLO_CYTHONIZE: 1
        #   CIBW_SOME_OPTION: value
        #    ...
        # with:
        #   package-dir: .
        #   output-dir: wheelhouse
        #   config-file: "{package}/pyproject.toml"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: python -m pip install build
      - run: python -m build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

# TODO: Need admin privileges...
#  upload_pypi:
#    needs: [build_wheels, build_sdist]
#    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
#    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
#          name: artifact
#          path: dist

#      - uses: pypa/gh-action-pypi-publish@v1.5.0
#        with:
#          user: __token__
#          password: ${{ secrets.pypi_password }}
          # To test: repository_url: https://test.pypi.org/legacy/
